plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.liquibase.gradle' version '2.2.0'
    id 'groovy' // Groovy for testing
    id 'jacoco' // Jacoco for code coverage
}

group = 'com.mgmtp.cfu'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

// Ensure the versions of dependencies
dependencyManagement {
    imports {
        mavenBom 'org.springframework.boot:spring-boot-dependencies:3.2.1'
    }
}

dependencies {
    // Spring implementation dependencies
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.3'
    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime 'org.liquibase:liquibase-core'
    liquibaseRuntime 'info.picocli:picocli:4.7.5'
	testImplementation(
			// JUnit
			'junit:junit:4.13.2',

			// Spock
			'org.spockframework:spock-core:2.4-M1-groovy-4.0',
			'org.spockframework:spock-spring:2.4-M1-groovy-4.0',

			// Spring boot test
			'org.springframework.boot:spring-boot-starter-test'
	)
    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
}

def lb_props = new Properties()
file("./src/main/resources/liquibase.properties").withInputStream { stream ->
    lb_props.load(stream)
}

liquibase {
    activities {
        main {
            changelogFile lb_props['changelogFile']
            url lb_props['db.url']
            username lb_props['db.username']
            password lb_props['db.password']
        }
    }
    runList = 'main'
}

// Specifying source sets to not run .java test files
sourceSets {
	test{
		java{
			srcDirs = []
		}
		groovy{
			srcDirs = ['src/test/groovy']
		}
	}
}

// Specifying tasks
tasks.named('test'){
	useJUnitPlatform()
	testLogging {
		events "started", "passed", "skipped", "failed"
	}
	finalizedBy 'jacocoTestReport'
}


jacocoTestReport{
	dependsOn 'test'
	reports{
		html.required.set(true)
	}
}

jacocoTestCoverageVerification {
	dependsOn 'test'
	violationRules {
		rule {
			limit {
				minimum = 0.8
			}
		}
	}
}

tasks.check.dependsOn jacocoTestCoverageVerification
